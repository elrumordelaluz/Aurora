/* * * * * * * * * * * * * * * * * * * * *\
  
    GLOBAL FUNCTIONS & MIXINS

\* * * * * * * * * * * * * * * * * * * * */


  



$default-breakpoint: root;
$current-breakpoint: $default-breakpoint;
$placeholders: ();


@mixin breakpoints($breakpoint) {

  $value: map-get($breakpoints, $breakpoint);
  
  @if $value != null {                                   
    $current-breakpoint: $breakpoint         !global;    
    @media (min-width: $value) { @content; }             
    $current-breakpoint: $default-breakpoint !global;    
  }
  
  @else {                                  
    @warn "Invalid breakpoint `#{$breakpoint}`.";        
  }
  
}

@mixin placeholder($name) {
  @if not index($placeholders, $name) {                 
    $placeholders: append($placeholders, $name) !global;
    
    @at-root {
      @each $breakpoint, $value in $breakpoints {       
        @media (min-width: $value) {                    
          %#{$name}-#{$breakpoint} {                    
            @content;                                   
          }
        }
      }
    
      %#{$name}-#{$default-breakpoint} {                
        @content;
      }
    }
  }
  
  @else {
    @warn "Placeholder `#{$name}` already exists.";     
  }
}


@mixin _($name) {
  @extend %#{$name}-#{$current-breakpoint} !optional;
}


@function un_px($val){
  @return $val / 1px;
}


// Math from: https://github.com/adambom/Sass-Math/blob/master/math.scss


@function power ($x, $n) {
    $ret: 1;
    
    @if $n >= 0 {
        @for $i from 1 through $n {
            $ret: $ret * $x;
        } 
    } @else {
        @for $i from $n to 0 {
            $ret: $ret / $x;
        }
    }
    
    @return $ret;
}

@function factorial ($x) {
    $ret: 1;
    
    @if $x > 0 {
        @while $x > 0 {
            $ret: $ret * $x;
            
            $x: $x - 1;
        }
    }
    
    @return $ret;
}

@function sin ($x) {
    $ret: 0;
    
    @for $n from 0 to 25 {
        $ret: $ret + power(-1, $n) * power($x, 2 * $n + 1) / factorial(2 * $n + 1);
    }

    @return $ret;
}

@function cos ($x) {
    $ret: 0;
    
    @for $n from 0 to 25 {
        $ret: $ret + power(-1, $n) * power($x, 2 * $n) / factorial(2 * $n);
    }

    @return $ret;
}

@function exp ($x) {
    $ret: 0;
    
    @for $n from 0 to 25 {
        $ret: $ret + power($x, $n) / factorial($n);
    }
    
    @return $ret;
}

@function ln($x) {
    $ret: 0;
    $n: 1;
    $dx: .001;
    
    @while $n <= $x {
        $ret: $ret + $dx / $n;
        
        $n: $n + $dx;
    }
    
    @return $ret;
}

@function sqrt($x) {    
    @return exp(0.5 * ln($x));
}
















