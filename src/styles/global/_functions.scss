/* * * * * * * * * * * * * * * * * * * * *\
  
    FUNCTIONS & MIXINS

    1. Grid 
    2. Typo

\* * * * * * * * * * * * * * * * * * * * */


  











/* * * * * * * * * * * * * * * * * * * * *\
  
    1. GRID FUNCTIONS / MIXINS

\* * * * * * * * * * * * * * * * * * * * */


$default-breakpoint: root;
$current-breakpoint: $default-breakpoint;
$placeholders: ();


@mixin breakpoints($breakpoint) {
  $value: map-get($breakpoints, $breakpoint);
  
  @if $value != null {                                   
    $current-breakpoint: $breakpoint         !global;    
    @media (min-width: $value) { @content; }             
    $current-breakpoint: $default-breakpoint !global;    
  }
  
  @else {                                  
    @warn "Invalid breakpoint `#{$breakpoint}`.";        
  }
}

@mixin placeholder($name) {
  @if not index($placeholders, $name) {                 
    $placeholders: append($placeholders, $name) !global;
    
    @at-root {
      @each $breakpoint, $value in $breakpoints {       
        @media (min-width: $value) {                    
          %#{$name}-#{$breakpoint} {                    
            @content;                                   
          }
        }
      }
    
      %#{$name}-#{$default-breakpoint} {                
        @content;
      }
    }
  }
  
  @else {
    @warn "Placeholder `#{$name}` already exists.";     
  }
}


@mixin _($name) {
  @extend %#{$name}-#{$current-breakpoint} !optional;
}





@include placeholder('fl') { float: left; }
@include placeholder('fr') { float: right; }
@include placeholder('dtc') { display: table-cell; }
@include placeholder('dib') { 
  display: inline-block; 
  vertical-align: top;
}


@mixin do-grid-items ( $cols, $prefix, $style ) {

  $px: if($prefix, -#{$prefix}, '' );


  @for $i from 1 through $cols {

    .item#{$px}-#{$i} {

      @if ( $style == 'float' ){

        @include _(fl);
        
        &.item--right {
          @include _(fr);
        }  

      } @else if ( $style == 'table' ){
        
          @include _(dtc);

      } @else if ( $style == 'block' ){
        
          @include _(dib);

      } @else if ( $style == 'all' ){
        
        .#{$aurora}grid--float & { @include _(fl); }

        .#{$aurora}grid--table & { @include _(dtc); }

        .#{$aurora}grid--block & { @include _(dib); }

      }
      
      width: if( $calc, calc( #{$i}/#{$cols} * 100% ), $i/$cols * 100% );
      
      @if ( $item_debug ) {
        &:before {
          content:'Item#{$px}-#{$i}'!important;
        }
      }

    }

    
  } // @for

} // @mixin




@mixin do-push-items ( $cols, $prefix ) {

  $px: if($prefix, -#{$prefix}, '' );

  @for $i from 1 through $cols {
   
    .item#{$px}--push-#{$i} {

      left: if( $calc, calc( #{$i}/#{$cols} * 100% ), $i/$cols * 100% );

      @if ( $item_debug ) {
        &:before {
          content:'Item#{$px}--push-#{$i}'!important;
        }
      }

    }
    
  } // @for

} // @mixin



@mixin do-pull-items ( $cols, $prefix ) {

  $px: if($prefix, -#{$prefix}, '' );

  @for $i from 1 through $cols {

    .item#{$px}--pull-#{$i} {
      
      right: if( $calc, calc( #{$i}/#{$cols} * 100% ), $i/$cols * 100% );

      @if ( $item_debug ) {
        &:before {
          content:'Item#{$px}--pull-#{$i}'!important;
        }
      }

    }
    
  } // @for

} // @mixin



@mixin do-offset-items ( $cols, $prefix ) {

  $px: if($prefix, -#{$prefix}, '' );

  @for $i from 1 through $cols {

    .item#{$px}--offset-#{$i} {
      
      margin-left: if( $calc, calc( #{$i}/#{$cols} * 100% ), $i/$cols * 100% );

      @if ( $item_debug ) {
        &:before {
          content:'Item#{$px}--offset-#{$i}'!important;
        }
      }

    }
    
  } // @for

} // @mixin













/* * * * * * * * * * * * * * * * * * * * *\
  
    2. TYPO FUNCTIONS / MIXINS

\* * * * * * * * * * * * * * * * * * * * */


@mixin baseline( $fz, $scale: 2 ) {
  
  $rhythm: $line_height * $fz / $scale;

  $lines: ceil( ($fz + 0.001px) / $rhythm );

  $lh: $rhythm * $lines / $fz;

  font-size: $fz;
  line-height: $lh;
  
  $baseline_distance: ($lh - $cap_height) / 2;

  padding-top: $baseline_distance + em;
  margin-bottom: $line_height - $baseline_distance + em;

}















