

/* * * * * * * * * * * * * * * * * * * * *\
  
    2. TYPO FUNCTIONS / MIXINS

\* * * * * * * * * * * * * * * * * * * * */



@mixin base_font_size( $base_fz, $bp ) {
  
  $ms_b: map-get( map-get($modular_scales, $bp), b);

  font-size: $ms_b / un_px($base_fz) * 100%;

}


@function push( $l, $fz, $lh, $b, $c) {
  @return ( $l - (( $fz / 2 * (( $lh * $b /  $fz) - $c)) / $b + 0.00001) ) * 1rem;
}

@function shift( $fz, $lh, $b, $c) {
  @return ( ( $fz / 2 * (( $lh * $b /  $fz) - $c )) / $b + 0.00001 ) * 1rem;
}

@function rem($fz, $base) {
  @return $fz / $base / 1px * 1rem;
}

@mixin set( $font, $val, $lh, $lines, $bp, $return: 'both' ) {
  
  $cap: map-get($font, cap-height);
  $ms: if($responsive_scales, map-get($modular_scales, $bp), $base_modular);
  
  $base: map-get($ms, b);
  $func: map-get($ms, f);
  $sizes: map-get($ms, s);

  $fz: ms( $val, $sizes, $func );

  @if ( $return == 'font' ) {
    font-size: rem( $fz, $base );
    line-height: #{$lh}rem;
  } @else if ( $return == 'baseline' ) {
    padding-top: shift( $fz, $lh, $base, $cap );
    margin-bottom: push( $lines, $fz, $lh, $base, $cap );
  } @else {
    font-size: rem( $fz, $base );
    line-height: #{$lh}rem;
    padding-top: shift( $fz, $lh, $base, $cap );
    margin-bottom: push( $lines, $fz, $lh, $base, $cap );
  } 

}




